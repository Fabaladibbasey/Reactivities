{"version":3,"sources":["app/models/activity.ts","app/models/paginations.ts","app/models/profile.ts","app/api/agent.ts","app/api/stores/activityStore.ts","app/api/stores/userStore.ts","app/api/stores/profileStore.ts","app/api/stores/store.ts","app/api/stores/commonStore.ts","app/api/stores/modalStore.ts","app/api/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/Errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextAreaInput.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/Errors/TestErrors.tsx","features/Errors/NotFound.tsx","features/Errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/ImageUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","classCallCheck","this","assign","ActivityFormValues","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","pagingParams","pageNumber","arguments","length","pageSize","Profile","user","displayName","userName","bio","image","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","config","token","wrap","_context","prev","next","store","commonStore","headers","Authorization","concat","abrupt","stop","_x","apply","_ref2","_callee2","_context2","JSON","parse","_x2","error","console","log","_ref3","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","activity","update","attend","Account","current","login","register","Profiles","username","uploadPhoto","photo","formData","FormData","append","Content-type","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","ActivityStore","_this","activityRegistry","Map","selectedActivity","initialLoading","isLoading","displayForm","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","activityStore_regeneratorRuntime","paginationResult","setInitialLoading","axiosParams","sent","runInAction","setActivity","t0","finish","loadActivity","getActivity","userStore","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","setLoading","createActivity","_callee3","attendee","newActivity","_context3","updateActivity","_ref4","_callee4","updatedActivity","_context4","objectSpread","_x3","deleteActivity","_ref5","_callee5","_context5","_x4","updateAttendance","_callee6","_context6","filter","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","result","activitiesByDate","reduce","activities","split","entries","UserStore","userStore_regeneratorRuntime","creds","setToken","modalStore","closeModal","logout","getUser","setImage","setDisplayName","profileStore","loadingProfile","uploadingPhoto","loading","followings","userActivities","loadingActivities","loadProfile","profileStore_regeneratorRuntime","file","photos","isMain","_x5","_ref6","activityStore","followingCount","_x6","_x7","loadFollowings","_ref7","_callee7","_context7","_x8","clearFollowings","loadUserActivities","_ref8","_callee8","_context8","_x9","_x10","CommonStore","window","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","ProfileStore","commentStore","CommentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","clearComments","addComment","commentStore_regeneratorRuntime","invoke","StoreContext","createContext","useStore","useContext","observer","_useStore$userStore","react_default","createElement","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","_useStore$profileStor","Fragment","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","disabled","Card","Header","Meta","substring","extra","Icon","profiles_FollowButton","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","profiles_ProfileCard","ActivityListItem","_React$useState","React","useState","_React$useState2","slicedToArray","target","setTarget","Segment","Group","Label","attached","textAlign","marginBottom","Description","react_router_dom","format","secondary","dashboard_ActivityListItemAttendee","clearing","floated","currentTarget","handleDeleteActivity","groupedActivities","group","react","sub","dashboard_ActivityListItem","_useStore$activitySto","vertical","marginTop","active","has","esm_Calendar","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","_useState","_useState2","loadingNext","setLoadingNext","useEffect","Grid","Column","react_infinite_scroller_default","pageStart","loadMore","hasMore","currentPage","totalPages","initialLoad","dashboard_ActivityList","dashboard_ActivityFilters","Loader","MyTextInput","label","props","objectWithoutProperties","_useField","useField","_useField2","field","meta","Form","Field","touched","formik_esm","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","form_MyTextInput","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Errors_ValidationErrors","HomePage","_useStore","isLoggedIn","users_LoginForm","users_RegisterForm","LoadingComponent","_ref$inverted","_ref$content","Dimmer","MyTextAreaInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","categoryOptions","MyDateInput","esm_extends","react_datepicker_min_default","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","useParams","useHistory","nullable","layout_LoadingComponent","enableReinitialize","uuid","hanldleFormSubmit","autoComplete","form_MyTextAreaInput","rows","MySelectInput","form_MyDateInput","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","top","zIndex","ribbon","verticalAlign","relaxed","divided","Extra","details_ActivityDetailedHeader","details_ActivityDetailedInfo","details_ActivityDetailedChat","details_ActivityDetailedSidebar","TestErrors","baseUrl","widths","primary","NotFound","Inline","message","Modal","onClose","profileFormValues","setProfileFormValues","isCurrentUser","editMode","setEditMode","Tab","Pane","profiles_ProfileEditForm","editProfile","panes","menuItem","menu","onTabChange","activeIndex","toLowerCase","handleTabChange","itemsPerRow","objectFit","PhotoWidgetCropper","setCropper","imagePreview","react_cropper_es","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","dragMode","scalable","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","ImageUploadWidget","files","_useState3","_useState4","revokeObjectURL","imageUpload_PhotoWidgetDropzone","imageUpload_PhotoWidgetCropper","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","_useState5","_useState6","deleteTarget","setDeleteTarget","imageUpload_ImageUploadWidget","handleSetMainPhoto","negative","handleDeletePhoto","profiles_ProfileAbout","profiles_ProfilePhotos","profiles_ProfileActivities","profiles_ProfileFollowings","menuPosition","ItemGroup","StatisticGroup","Statistic","Divider","profiles_ProfileHeader","profiles_ProfileContent","Component","component","rest","react_router","location","useLocation","finally","react_toastify_esm","hideProgressBar","modal_ModalContainer","path","layout_NavBar","layout_PrivateRoute","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","d","__webpack_exports__","src_history","createBrowserHistory","ReactDOM","createRoot","document","getElementById","Provider","app_App"],"mappings":"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","file":"static/js/main.a3621d70.chunk.js","sourcesContent":["import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date | null;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    host?: Profile;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(init?: ActivityFormValues) {\r\n        if (!init) return;\r\n        this.category = init.category;\r\n        this.title = init.title;\r\n        this.description = init.description;\r\n        this.date = init.date;\r\n        this.city = init.city;\r\n        this.venue = init.venue;\r\n        this.id = init.id;\r\n\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class pagingParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    displayName: string;\r\n    userName: string;\r\n    bio?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n    following: boolean;\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    displayName: string;\r\n    userName: string;\r\n    bio?: string;\r\n    image?: string;\r\n\r\n\r\n    constructor(user: User) {\r\n        this.displayName = user.displayName;\r\n        this.userName = user.userName;\r\n        this.image = user.image;\r\n        this.bio = user.bio;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n    publicId?: string;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/paginations\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./stores/store\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use(async config => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError<any, any>) => {\r\n    console.log('inter error', error);\r\n\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues) => requests.post<User>(\"/account/register\", user),\r\n\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (photo: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', photo);\r\n        return axios.post<Photo>('/photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    // unfollow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    // listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => axios.get<PaginatedResult<UserActivity[]>>(`/profiles/${username}/activities?predicate=${predicate}`).then(responseBody),\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n};\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Activity, ActivityFormValues } from \"../../models/activity\";\r\nimport { Pagination, pagingParams } from \"../../models/paginations\";\r\nimport { Profile } from \"../../models/profile\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    initialLoading: boolean = false;\r\n    isLoading: boolean = false;\r\n    displayForm: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new pagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new pagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            })\r\n\r\n    }\r\n\r\n\r\n    setPagingParams = (pagingParams: pagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setInitialLoading(true);\r\n        try {\r\n            let paginationResult = await agent.Activities.list(this.axiosParams);\r\n            runInAction(() => {\r\n                paginationResult.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                })\r\n\r\n                this.pagination = paginationResult.pagination;\r\n            })\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setInitialLoading(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                return activity;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            } finally {\r\n                this.setInitialLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        let user = store.userStore.user;\r\n\r\n        if (user) {\r\n\r\n            activity.isGoing = activity.attendees!.some(a => a.userName === user!.userName);\r\n\r\n            activity.isHost = activity.hostUsername === user!.userName;\r\n            activity.host = activity.attendees!.find(x => x.userName === activity.hostUsername);\r\n\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n\r\n\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setInitialLoading = (initialLoading: boolean) => {\r\n        this.initialLoading = initialLoading;\r\n    }\r\n\r\n    setLoading = (isLoading: boolean) => {\r\n        this.isLoading = isLoading;\r\n    }\r\n\r\n    // setActivity = (activity: Activity) => {\r\n    //     activity.date = new Date(activity.date!);\r\n    //     this.activityRegistry.set(activity.id, activity);\r\n    // }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.attendees = [attendee];\r\n            newActivity.hostUsername = user!.userName;\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            const updatedActivity = { ...this.getActivity(activity.id!), ...activity };\r\n            this.setActivity(updatedActivity as Activity);\r\n            runInAction(() => {\r\n                // this.activityRegistry.set(activity.id!, updatedActivity as Activity);\r\n                this.selectedActivity = updatedActivity as Activity;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                // this.activities = [...this.activities.filter(a => a.id !== id)];\r\n                this.activityRegistry.delete(id);\r\n                this.selectedActivity = undefined;\r\n                this.displayForm = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.setLoading(false);\r\n            })\r\n        }\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        // return Object.entries(\r\n        //     this.activitiesByDate.reduce((activities, activity) => {\r\n        //         const date = activity.date;\r\n        //         activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n        //         return activities;\r\n        //     }, {} as {[key: string]: Activity[]})\r\n        // )\r\n        let result = this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = activity.date!.toISOString().split('T')[0]!;\r\n            activities[date] = activities[date] || [];\r\n            activities[date].push(activity);\r\n            return activities;\r\n        }, {} as { [key: string]: Activity[] })\r\n\r\n        return Object.entries(result);\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n\r\n        const user = store.userStore.user;\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity!.isGoing && !this.selectedActivity!.isHost) {\r\n                    this.selectedActivity!.attendees = this.selectedActivity!.attendees!.filter(a => a.userName !== user!.userName);\r\n                } else if (!this.selectedActivity!.isGoing && !this.selectedActivity!.isHost) {\r\n                    let attendee = new Profile(user!);\r\n                    this.selectedActivity!.attendees!.push(attendee);\r\n                }\r\n\r\n                if (this.selectedActivity!.isHost) {\r\n                    this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                }\r\n                this.setActivity(this.selectedActivity!);\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.setLoading(false);\r\n\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.userName === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../../..\";\r\nimport { User, UserFormValues } from \"../../models/user\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Photo, Profile, UserActivity } from \"../../models/profile\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class profileStore {\r\n    profile: Profile | undefined = undefined;\r\n    loadingProfile = false;\r\n    uploadingPhoto = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            console.log('photo to upload', photo);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos!.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                this.profile!.photos!.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos!.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos!.filter(a => a.id !== photo.id);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName !== store.userStore.user!.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName!);\r\n                }\r\n                this.profile = { ...this.profile!, ...profile };\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user!.userName && this.profile.userName === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                // if (username !== store.userStore.user!.userName) {\r\n                //    \r\n                // }\r\n                if (this.profile && this.profile.userName === store.userStore.user!.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                // following ? this.followings.push(this.profile!) : this.followings = this.followings.filter(a => a.userName !== username);\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loading = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearFollowings = () => {\r\n        this.followings = [];\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate: string) => {\r\n        console.log('loading user activities', username, predicate);\r\n\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities.data;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport ServerError from \"../../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token, \r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n            );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n    \r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment, CommentFormValues } from \"../../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user!.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection\r\n                .start()\r\n                // .then(() => console.log(this.hubConnection!.state))\r\n                // .then(() => {\r\n                //     console.log('Attempting to join group');\r\n                //     this.hubConnection!.invoke('AddToGroup', activityId);\r\n                // })\r\n                .catch(error => console.log('Error establishing connection: ', error));\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            })\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                        this.comments.push(comment);\r\n                    })\r\n                })\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection!.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: CommentFormValues) => {\r\n        // values.activityId = store.activityStore.selectedActivity!.id;\r\n        try {\r\n            if (this.hubConnection) {\r\n                await this.hubConnection.invoke<ChatComment>('SendComment', values);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, MenuItem, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../api/stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name='Activities' as={NavLink} to='/activities' />\r\n                <Menu.Item name='Errors' as={NavLink} to='/errors' />\r\n                <Menu.Item>\r\n                    <Button positive content='Create Activity' as={NavLink} to='/createActivity' />\r\n                </Menu.Item>\r\n\r\n                <MenuItem position='right'>\r\n                    <Image src={user && user.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={`${user && user.displayName}`}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user && user.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport { Profile } from '../../app/models/profile'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction FollowButton({ profile }: Props) {\r\n    const { loading, updateFollowing } = useStore().profileStore\r\n    const { user } = useStore().userStore\r\n\r\n    if (profile.userName === user!.userName) return null\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        if (profile.following) {\r\n            updateFollowing(username, false)\r\n        }\r\n        else {\r\n            updateFollowing(username, true)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Reveal animated='move'>\r\n                <Reveal.Content visible style={{ width: '100%' }}>\r\n                    <Button fluid color='teal' content={profile.following ? 'Following' : 'not following'} />\r\n                </Reveal.Content>\r\n                <Reveal.Content hidden style={{ width: '100%' }}>\r\n                    <Button\r\n                        fluid basic color={profile.following ? 'red' : 'green'} content={profile.following ? 'Unfollow' : 'Follow'}\r\n                        loading={loading}\r\n                        onClick={(e) => handleFollow(e, profile.userName)}\r\n                        disabled={loading}\r\n                    />\r\n                </Reveal.Content>\r\n            </Reveal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    Profile: Profile\r\n}\r\n\r\nfunction ProfileCard({ Profile }: Props) {\r\n    return (\r\n        <Card>\r\n            <Image src={Profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{Profile.displayName}</Card.Header>\r\n                <Card.Meta>\r\n                    <span>\r\n                        {\r\n                            (Profile.bio && Profile.bio.length > 30) ? Profile.bio.substring(0, 30) : Profile.bio}\r\n                        ...\r\n                    </span>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button as={Link} to={`/profiles/${Profile.userName}`} basic color='blue' content='View Profile' />\r\n                <Icon name='user' />\r\n                {Profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={Profile} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard)","import { link } from 'fs'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { List, Image, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.userName}\r\n                    trigger={\r\n                        <List.Item key={attendee.displayName} style={{ position: 'relative' }} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard Profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)","import React, { SyntheticEvent } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityListItem({ activity }: Props) {\r\n    const { activityStore } = useStore();\r\n    const { deleteActivity, isLoading } = activityStore;\r\n    const [target, setTarget] = React.useState('');\r\n    const handleDeleteActivity = (e: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        setTarget(e.currentTarget.name);\r\n        deleteActivity(id);\r\n    }\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 4 }} size='tiny' circular src={activity.host!.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by\r\n                                <Link to={`/profiles/${activity.host!.userName}`}> {activity.host!.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}, {activity.city}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n                {\r\n                    activity.isHost &&\r\n                    <Button\r\n                        name={activity.id}\r\n                        loading={isLoading && target === activity.id}\r\n                        onClick={(e) => handleDeleteActivity(e, activity.id)}\r\n                        color='red'\r\n                        floated='right'\r\n                        content='Delete'\r\n                    />\r\n                }\r\n            </Segment>\r\n\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                groupedActivities.map(([group, activities]) => {\r\n                    return (\r\n                        <Fragment key={group}>\r\n                            <Header sub color='teal'>\r\n                                {group}\r\n                            </Header>\r\n\r\n                            {\r\n                                activities.map(activity => (\r\n                                    <ActivityListItem key={activity.id} activity={activity} />\r\n                                ))\r\n                            }\r\n\r\n                        </Fragment>)\r\n                })\r\n            }\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Calendar } from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\n\r\nfunction ActivityFilters() {\r\n    const { predicate, setPredicate } = useStore().activityStore\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 50 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date!)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters)","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { pagingParams } from '../../../app/models/paginations';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, initialLoading, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleLoadingNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new pagingParams(activityStore.pagingParams.pageNumber + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, []);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                {initialLoading && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleLoadingNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nconst MyTextInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n                <input {...field} {...props} />\r\n            </label>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\n\r\nfunction LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values)\r\n                .catch(error => setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='LOGIN TO REACTIVITIES' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <Label style={{ marginBottom: '10px' }} basic color='red' content={errors.error} />\r\n                    } />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n\r\n\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm)","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nfunction ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            <Message.List>\r\n                {errors.map((err: any, i: any) => (\r\n                    <Message.Item key={i}>{err}</Message.Item>\r\n                ))}\r\n\r\n            </Message.List>\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../Errors/ValidationErrors'\r\n\r\nfunction RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values)\r\n                .catch(error => {\r\n                    setErrors({ error })\r\n\r\n                })}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                userName: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, isValid, dirty, errors }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='REGISTER TO REACTIVITIES' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='UserName' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                        render={() =>\r\n                            <ValidationErrors errors={errors.error} />\r\n                        } />\r\n\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n\r\n                </Form>\r\n\r\n\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nfunction HomePage() {\r\n  const { userStore, modalStore } = useStore();\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        <h1 className='ui inverted stackable header'>\r\n          <img src='/assets/logo.png' alt='logo' className='ui image massive' />\r\n          <div className='content'>Reactivities</div>\r\n        </h1>\r\n\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <h2 className='ui inverted stackable header'>\r\n              {`Welcome to Reactivities ${userStore.user!.displayName}`}\r\n            </h2>\r\n            <Button as={Link} to='/activities' size='huge' inverted>Go to Activities</Button>\r\n          </>\r\n\r\n        ) : (\r\n\r\n          <>\r\n            <h2>Do whatever you wanted to do</h2>\r\n            <h3>Go ahead and </h3>\r\n            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' color='teal'>Login!</Button>\r\n            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' color='teal'>Register!</Button>\r\n          </>\r\n\r\n        )}\r\n\r\n      </Container>\r\n    </Segment>\r\n\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content: string;\r\n}\r\n\r\n\r\n\r\nfunction LoadingComponent({inverted = true, content = 'Loading...'} : Props) {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n        <Loader content={content} />\r\n    </Dimmer>\r\n  )\r\n}\r\n\r\nexport default LoadingComponent","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nconst MyTextAreaInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n                <textarea {...field} {...props} />\r\n            </label>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextAreaInput","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: { key: string, text: string, value: string }[];\r\n    label?: string;\r\n}\r\n\r\nconst MyTextInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n            </label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value}\r\n                onChange={(e, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput","export const categoryOptions = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' },\r\n];\r\n\r\n","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\nconst MyDateInput = ({ ...props }: Partial<ReactDatePickerProps>) => {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(date) => helpers.setValue(date)}\r\n                showTimeSelect\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n                timeCaption=\"time\"\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                placeholderText='Select Date'\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextAreaInput from '../../../app/common/form/MyTextAreaInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/CategoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const { activityStore } = useStore();\r\n    const { isLoading, initialLoading, createActivity, updateActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues);\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id)\r\n            .then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [loadActivity, id]);\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    });\r\n\r\n\r\n    const hanldleFormSubmit = (activity: ActivityFormValues) => {\r\n        if (!activity.id) {\r\n\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (initialLoading) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => hanldleFormSubmit(values)}>\r\n                {({ handleSubmit, isSubmitting }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextAreaInput rows={3} name='description' placeholder='Description' />\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category' />\r\n                        <MyDateInput name='date' />\r\n                        <MyTextInput name='city' placeholder='City' />\r\n                        <MyTextInput name='venue' placeholder='Venue' />\r\n                        <Button loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})\r\n","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { ReactNode, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Button, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\nimport MyTextAreaInput from '../../../app/common/form/MyTextAreaInput'\r\nimport * as Yup from 'yup'\r\nimport { text } from 'stream/consumers'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    initialValues={{ body: '', activityId }}\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && dirty && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                            placeholder='Add your comment, (Enter to submit, Shift + Enter for new line)'\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago </div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label, } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/api/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { isLoading, updateAttendance, } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', left: '-14', top: '20', zIndex: '100' }} ribbon color='red' content=\"Cancelled\" />\r\n\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{activity.date && format(activity.date, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host && activity.host.userName}`}>\r\n                                            {activity.host && activity.host.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n\r\n                {activity.isHost ?\r\n                    <Button loading={isLoading} onClick={updateAttendance} className={`${activity.isCancelled ? 'green' : 'basic red'}`}>{\r\n                        activity.isCancelled ? 'Reactivate Activity' : 'Cancel Activity'\r\n                    }</Button>\r\n                    :\r\n                    <Button loading={isLoading} onClick={updateAttendance} color='teal'>{\r\n                        activity.isGoing ? 'Cancel attendance' : 'Join Activity'\r\n                    }</Button>\r\n                }\r\n\r\n                {\r\n                    activity.isHost && <Button as={Link} to={`/createActivity/edit/${activity.id}`} color='orange' floated='right' disabled={activity.isCancelled}>\r\n                        Manage Event\r\n                    </Button>\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(new Date(activity.date!), 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity }: Props) {\r\n    const { attendees, hostUsername } = activity;\r\n\r\n    if (!attendees) return null\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length < 2 ? 'Person is' : 'People are'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === hostUsername &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {\r\n                                    attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n    const { selectedActivity: activity, loadActivity, clearSelectedActivity } = activityStore;\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => {\r\n            clearSelectedActivity();\r\n        }\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n\r\n\r\n    if (!activity) return <LoadingComponent content='Activity loading...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState<[]>([]);\r\n\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors.length > 0 && <ValidationErrors errors={errors} />}\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Sorry, we couldn't find what you're looking for.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/api/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container >\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error && commonStore.error.message} />\r\n            {commonStore.error && commonStore.error.details &&\r\n\r\n                <Segment >\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: 10 }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../api/stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const { modalStore } = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer)","import { Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextAreaInput from '../../app/common/form/MyTextAreaInput'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport * as Yup from 'yup'\r\nimport { Profile } from '../../app/models/profile'\r\n\r\n\r\ninterface Props {\r\n    profile: Profile,\r\n    updateProfile: (profile: Partial<Profile>) => void\r\n}\r\n\r\nfunction ProfileEditForm({ profile, updateProfile }: Props) {\r\n    const [profileFormValues, setProfileFormValues] = useState({ displayName: '', bio: '' });\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfileFormValues(\r\n            {\r\n                displayName: profile.displayName,\r\n                bio: profile.bio!\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={profileFormValues}\r\n            onSubmit={values => updateProfile(values)}\r\n            validationSchema={validationSchema}\r\n            enableReinitialize\r\n        >\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header sub color='teal' content='Basics' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextAreaInput name='bio' placeholder='Bio' rows={3} />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        floated='right'\r\n                        positive\r\n                        type='submit'\r\n                        content='Update profile'\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileEditForm)","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileAbout({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, updateProfile } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    function handleUpdateProfile(editProfile: Partial<Profile>) {\r\n        updateProfile(editProfile).then(() => setEditMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setEditMode(!editMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ? (\r\n                        <ProfileEditForm profile={profile} updateProfile={handleUpdateProfile} />\r\n                    ) : (\r\n                        <p>\r\n                            {profile.bio}\r\n                        </p>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileAbout)","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport { UserActivity } from '../../app/models/profile';\r\n\r\n\r\nfunction ProfileActivities() {\r\n\r\n    const { profile, loadingActivities, loadUserActivities, userActivities } = useStore().profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName, 'future');\r\n    }, [loadUserActivities, profile]);\r\n\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as\r\n            number].menuItem.split(' ')[0].toLowerCase());\r\n    };\r\n\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Event' },\r\n        { menuItem: 'Pass Event' },\r\n        { menuItem: 'Hosting' },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities && userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileActivities)","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport ProfileCard from './ProfileCard'\r\n\r\ninterface Props {\r\n    predicate: string\r\n}\r\n\r\nfunction ProfileFollowings({ predicate }: Props) {\r\n    const { profile, followings, loadFollowings, loading, clearFollowings } = useStore().profileStore\r\n    useEffect(() => {\r\n        loadFollowings(predicate)\r\n\r\n        return () => {\r\n            clearFollowings()\r\n        }\r\n    }, [profile, predicate])\r\n\r\n    return (\r\n        <Tab.Pane loading={loading}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header content={\r\n                        predicate === 'followers' ? `People following ${profile!.displayName}` : `people ${profile!.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.userName} Profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings)","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ setCropper, imagePreview }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%', objectFit: 'cover' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            dragMode='move'\r\n            scalable={false}\r\n            // cropBoxMovable={true}\r\n            // cropBoxResizable={true}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        // crop={this.cropImage}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: '200px'\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles: any) => {\r\n        setFiles(\r\n            acceptedFiles.map((file: any) =>\r\n                Object.assign(file, {\r\n                    preview: URL.createObjectURL(file)\r\n                })\r\n            )\r\n        );\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetDropzone","import React, { useState, useEffect } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../api/stores/store';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nfunction ImageUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => {\r\n                uploadPhoto(blob!);\r\n            }, 'image/jpeg')\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach(file => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 2 - Resize image ' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 3 - Preview & upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}>\r\n                        </div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ImageUploadWidget\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport ImageUploadWidget from '../../app/common/imageUpload/ImageUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadingPhoto, uploadPhoto, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    const [deleteTarget, setDeleteTarget] = useState(false);\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setDeleteTarget(true);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    function handleUploadImage(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <ImageUploadWidget\r\n                            uploadPhoto={handleUploadImage}\r\n                            loading={uploadingPhoto}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos!.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n\r\n                                                basic\r\n                                                positive\r\n                                                content='Main'\r\n                                                name={photo.id}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                loading={loading && target === photo.id && !deleteTarget}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                negative\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                loading={loading && target === photo.id && deleteTarget}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        {\r\n            menuItem: 'Events', render: () => <ProfileActivities />\r\n        },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings predicate='followers' /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings predicate='following' /> },\r\n    ]\r\n\r\n    return (\r\n\r\n        <Tab menu={{ fluid: true, vertical: true }} menuPosition='right' panes={panes} />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Divider, Grid, Item, ItemGroup, Reveal, Segment, Statistic, StatisticGroup } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <ItemGroup>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' circular src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h1'>{profile.displayName}</Item.Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </ItemGroup>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <StatisticGroup widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </StatisticGroup>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader)","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nfunction ProfilePage() {\r\n    const { userName } = useParams<{ userName: string }>()\r\n    const { loadingProfile, profile, loadProfile } = useStore().profileStore\r\n\r\n    useEffect(() => {\r\n        loadProfile(userName)\r\n    }, [loadProfile, userName])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {\r\n                    profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n\r\n                        <ProfileContent profile={profile!} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)","import React from 'react';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteProps, Route, Redirect } from \"react-router-dom\";\r\nimport { useStore } from \"../api/stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<any>;\r\n}\r\n\r\nexport default observer(function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => userStore.isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\r\n        />\r\n    )\r\n})","import React, { useEffect } from 'react'\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './layout/NavBar';\nimport ActivityDashboard from '../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../features/home/HomePage';\nimport ActivityForm from '../features/activities/form/ActivityForm';\nimport ActivityDetails from '../features/activities/details/ActivityDetails';\nimport TestErrors from '../features/Errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../features/Errors/NotFound';\nimport ServerError from '../features/Errors/ServerError';\nimport { useStore } from './api/stores/store';\nimport LoadingComponent from './layout/LoadingComponent';\nimport ModalContainer from './common/modal/ModalContainer';\nimport ProfilePage from '../features/profiles/ProfilePage';\nimport PrivateRoute from './layout/PrivateRoute';\nfunction App() {\n  const location = useLocation();\n  const { userStore, commonStore } = useStore();\n\n  // if (commonStore.token) {\n  //   if (!userStore.user) {\n  //     userStore.getUser().finally(() => commonStore.setAppLoaded());\n  //   }\n  // }\n\n\n  useEffect(\n    () => {\n      if (commonStore.token) {\n        userStore.getUser().finally(() => commonStore.setAppLoaded());\n      } else {\n        commonStore.setAppLoaded();\n      }\n    },\n    [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route path={'/(.+)'} render={() => (\n        <>\n\n          <NavBar />\n          <Container style={{ marginTop: '6rem' }}>\n            <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute exact path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute exact key={location.key} path={'/createActivity'} component={ActivityForm} />\n              <PrivateRoute exact path='/createActivity/edit/:id' component={ActivityForm} />\n              <PrivateRoute exact path='/profiles/:userName' component={ProfilePage} />\n              <PrivateRoute exact path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={NotFound} />\n            </Switch>\n          </Container>\n        </>\n      )} />\n\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './app/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/api/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n  // </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}