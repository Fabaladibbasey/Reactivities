{"version":3,"sources":["app/models/activity.ts","app/models/paginations.ts","app/models/profile.ts","app/api/agent.ts","app/api/stores/activityStore.ts","app/api/stores/userStore.ts","app/api/stores/profileStore.ts","app/api/stores/store.ts","app/api/stores/commonStore.ts","app/api/stores/modalStore.ts","app/api/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/Errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextAreaInput.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/Errors/TestErrors.tsx","features/Errors/NotFound.tsx","features/Errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/ImageUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","classCallCheck","this","assign","ActivityFormValues","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","pagingParams","pageNumber","arguments","length","pageSize","Profile","user","displayName","userName","bio","image","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","config","token","wrap","_context","prev","next","store","commonStore","headers","Authorization","concat","abrupt","stop","_x","apply","_ref2","_callee2","_context2","JSON","parse","_x2","error","console","log","_ref3","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","activity","update","attend","Account","current","login","register","fbLogin","accessToken","googleLogin","Profiles","username","uploadPhoto","photo","formData","FormData","append","Content-type","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","ActivityStore","_this","activityRegistry","Map","selectedActivity","initialLoading","isLoading","displayForm","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","activityStore_regeneratorRuntime","paginationResult","setInitialLoading","axiosParams","sent","runInAction","setActivity","t0","finish","loadActivity","getActivity","userStore","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","setLoading","createActivity","_callee3","attendee","newActivity","_context3","updateActivity","_ref4","_callee4","updatedActivity","_context4","objectSpread","_x3","deleteActivity","_ref5","_callee5","_context5","_x4","updateAttendance","_callee6","_context6","filter","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","result","activitiesByDate","reduce","activities","split","entries","UserStore","fbAccessToken","fbLoading","googleAccessToken","googleLoading","userStore_regeneratorRuntime","creds","setToken","modalStore","closeModal","logout","getUser","setImage","setDisplayName","getFacebookLoginStatus","window","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","scope","_ref6","credential","profileStore","loadingProfile","uploadingPhoto","loading","followings","userActivities","loadingActivities","loadProfile","profileStore_regeneratorRuntime","file","photos","isMain","_x5","activityStore","followingCount","_x6","_x7","loadFollowings","_ref7","_callee7","_context7","_x8","clearFollowings","loadUserActivities","_ref8","_callee8","_context8","_x9","_x10","CommonStore","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","ProfileStore","commentStore","CommentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","clearComments","addComment","commentStore_regeneratorRuntime","invoke","StoreContext","createContext","useStore","useContext","observer","_useStore$userStore","react_default","createElement","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","_useStore$profileStor","Fragment","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","disabled","Card","Header","Meta","substring","extra","Icon","profiles_FollowButton","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","profiles_ProfileCard","ActivityListItem","_React$useState","React","useState","_React$useState2","slicedToArray","target","setTarget","Segment","Group","Label","attached","textAlign","marginBottom","Description","react_router_dom","format","secondary","dashboard_ActivityListItemAttendee","clearing","floated","currentTarget","handleDeleteActivity","groupedActivities","group","react","sub","dashboard_ActivityListItem","_useStore$activitySto","vertical","marginTop","active","has","esm_Calendar","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","_useState","_useState2","loadingNext","setLoadingNext","useEffect","Grid","Column","react_infinite_scroller_default","pageStart","loadMore","hasMore","currentPage","totalPages","initialLoad","dashboard_ActivityList","dashboard_ActivityFilters","Loader","MyTextInput","label","props","objectWithoutProperties","_useField","useField","_useField2","field","meta","Form","Field","touched","formik_esm","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","form_MyTextInput","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Errors_ValidationErrors","HomePage","_useStore","google","accounts","initialize","client_id","callback","renderButton","document","getElementById","theme","prompt","notification","isNotDisplayed","isSkippedMoment","isDismissedMoment","isLoggedIn","users_LoginForm","users_RegisterForm","Divider","LoadingComponent","_ref$inverted","_ref$content","Dimmer","MyTextAreaInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","categoryOptions","MyDateInput","esm_extends","react_datepicker_min_default","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","useParams","useHistory","nullable","layout_LoadingComponent","enableReinitialize","uuid","hanldleFormSubmit","autoComplete","form_MyTextAreaInput","rows","MySelectInput","form_MyDateInput","border","resetForm","onKeyPress","shiftKey","preventDefault","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","top","zIndex","ribbon","verticalAlign","relaxed","divided","Extra","details_ActivityDetailedHeader","details_ActivityDetailedInfo","details_ActivityDetailedChat","details_ActivityDetailedSidebar","TestErrors","baseUrl","widths","primary","NotFound","Inline","message","Modal","onClose","profileFormValues","setProfileFormValues","isCurrentUser","editMode","setEditMode","Tab","Pane","profiles_ProfileEditForm","editProfile","panes","menuItem","menu","onTabChange","activeIndex","toLowerCase","handleTabChange","itemsPerRow","objectFit","PhotoWidgetCropper","setCropper","imagePreview","react_cropper_es","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","dragMode","scalable","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","ImageUploadWidget","files","_useState3","_useState4","revokeObjectURL","imageUpload_PhotoWidgetDropzone","imageUpload_PhotoWidgetCropper","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","_useState5","_useState6","deleteTarget","setDeleteTarget","imageUpload_ImageUploadWidget","handleSetMainPhoto","negative","handleDeletePhoto","profiles_ProfileAbout","profiles_ProfilePhotos","profiles_ProfileActivities","profiles_ProfileFollowings","menuPosition","ItemGroup","StatisticGroup","Statistic","profiles_ProfileHeader","profiles_ProfileContent","Component","component","rest","react_router","location","useLocation","finally","react_toastify_esm","hideProgressBar","modal_ModalContainer","path","layout_NavBar","layout_PrivateRoute","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","d","__webpack_exports__","src_history","createBrowserHistory","ReactDOM","createRoot","Provider","app_App"],"mappings":"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","file":"static/js/main.13aab62e.chunk.js","sourcesContent":["import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date | null;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    host?: Profile;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(init?: ActivityFormValues) {\r\n        if (!init) return;\r\n        this.category = init.category;\r\n        this.title = init.title;\r\n        this.description = init.description;\r\n        this.date = init.date;\r\n        this.city = init.city;\r\n        this.venue = init.venue;\r\n        this.id = init.id;\r\n\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class pagingParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    displayName: string;\r\n    userName: string;\r\n    bio?: string;\r\n    image?: string;\r\n    photos?: Photo[];\r\n    following: boolean;\r\n    followersCount: number;\r\n    followingCount: number;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    displayName: string;\r\n    userName: string;\r\n    bio?: string;\r\n    image?: string;\r\n\r\n\r\n    constructor(user: User) {\r\n        this.displayName = user.displayName;\r\n        this.userName = user.userName;\r\n        this.image = user.image;\r\n        this.bio = user.bio;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n    publicId?: string;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/paginations\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./stores/store\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use(async config => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers!.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError<any, any>) => {\r\n    console.log('inter error', error);\r\n\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues) => requests.post<User>(\"/account/register\", user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(\"/account/fbLogin?accessToken=\" + accessToken, {}),\r\n    googleLogin: (accessToken: string) => requests.post<User>(\"/account/googleLogin?accessToken=\" + accessToken, {}),\r\n\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (photo: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', photo);\r\n        return axios.post<Photo>('/photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    // unfollow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    // listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => axios.get<PaginatedResult<UserActivity[]>>(`/profiles/${username}/activities?predicate=${predicate}`).then(responseBody),\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n};\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Activity, ActivityFormValues } from \"../../models/activity\";\r\nimport { Pagination, pagingParams } from \"../../models/paginations\";\r\nimport { Profile } from \"../../models/profile\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    initialLoading: boolean = false;\r\n    isLoading: boolean = false;\r\n    displayForm: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new pagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new pagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            })\r\n\r\n    }\r\n\r\n\r\n    setPagingParams = (pagingParams: pagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setInitialLoading(true);\r\n        try {\r\n            let paginationResult = await agent.Activities.list(this.axiosParams);\r\n            runInAction(() => {\r\n                paginationResult.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                })\r\n\r\n                this.pagination = paginationResult.pagination;\r\n            })\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.setInitialLoading(false);\r\n        }\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setInitialLoading(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                return activity;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            } finally {\r\n                this.setInitialLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        let user = store.userStore.user;\r\n\r\n        if (user) {\r\n\r\n            activity.isGoing = activity.attendees!.some(a => a.userName === user!.userName);\r\n\r\n            activity.isHost = activity.hostUsername === user!.userName;\r\n            activity.host = activity.attendees!.find(x => x.userName === activity.hostUsername);\r\n\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n\r\n\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setInitialLoading = (initialLoading: boolean) => {\r\n        this.initialLoading = initialLoading;\r\n    }\r\n\r\n    setLoading = (isLoading: boolean) => {\r\n        this.isLoading = isLoading;\r\n    }\r\n\r\n    // setActivity = (activity: Activity) => {\r\n    //     activity.date = new Date(activity.date!);\r\n    //     this.activityRegistry.set(activity.id, activity);\r\n    // }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.attendees = [attendee];\r\n            newActivity.hostUsername = user!.userName;\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            const updatedActivity = { ...this.getActivity(activity.id!), ...activity };\r\n            this.setActivity(updatedActivity as Activity);\r\n            runInAction(() => {\r\n                // this.activityRegistry.set(activity.id!, updatedActivity as Activity);\r\n                this.selectedActivity = updatedActivity as Activity;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                // this.activities = [...this.activities.filter(a => a.id !== id)];\r\n                this.activityRegistry.delete(id);\r\n                this.selectedActivity = undefined;\r\n                this.displayForm = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.setLoading(false);\r\n            })\r\n        }\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        // return Object.entries(\r\n        //     this.activitiesByDate.reduce((activities, activity) => {\r\n        //         const date = activity.date;\r\n        //         activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n        //         return activities;\r\n        //     }, {} as {[key: string]: Activity[]})\r\n        // )\r\n        let result = this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = activity.date!.toISOString().split('T')[0]!;\r\n            activities[date] = activities[date] || [];\r\n            activities[date].push(activity);\r\n            return activities;\r\n        }, {} as { [key: string]: Activity[] })\r\n\r\n        return Object.entries(result);\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n\r\n        const user = store.userStore.user;\r\n        this.setLoading(true);\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity!.isGoing && !this.selectedActivity!.isHost) {\r\n                    this.selectedActivity!.attendees = this.selectedActivity!.attendees!.filter(a => a.userName !== user!.userName);\r\n                } else if (!this.selectedActivity!.isGoing && !this.selectedActivity!.isHost) {\r\n                    let attendee = new Profile(user!);\r\n                    this.selectedActivity!.attendees!.push(attendee);\r\n                }\r\n\r\n                if (this.selectedActivity!.isHost) {\r\n                    this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                }\r\n                this.setActivity(this.selectedActivity!);\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.setLoading(false);\r\n\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.userName === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../../..\";\r\nimport { User, UserFormValues } from \"../../models/user\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\n// declare var google: any;\r\n\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading: boolean = false;\r\n    googleAccessToken: string | null = null;\r\n    googleLoading: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus((response) => {\r\n            if (response && response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        });\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        const apiLogin = async (accessToken: string) => {\r\n            this.fbLoading = true;\r\n            try {\r\n                const user = await agent.Account.fbLogin(accessToken);\r\n                store.commonStore.setToken(user.token);\r\n\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                })\r\n\r\n                history.push('/activities');\r\n                store.modalStore.closeModal();\r\n\r\n            } catch (error) {\r\n                throw error;\r\n            } finally {\r\n                this.fbLoading = false;\r\n            }\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login((response) => {\r\n                if (response != null && response.authResponse != null) {\r\n                    apiLogin(response.authResponse.accessToken);\r\n                }\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n\r\n    googleLogin = async (response: any) => {\r\n        this.googleLoading = true;\r\n        try {\r\n            const user = await agent.Account.googleLogin(response.credential);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n\r\n        } catch (error) {\r\n            throw error;\r\n        } finally {\r\n            this.googleLoading = false;\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Photo, Profile, UserActivity } from \"../../models/profile\";\r\nimport agent from \"../agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class profileStore {\r\n    profile: Profile | undefined = undefined;\r\n    loadingProfile = false;\r\n    uploadingPhoto = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            console.log('photo to upload', photo);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos!.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                this.profile!.photos!.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos!.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos!.filter(a => a.id !== photo.id);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName !== store.userStore.user!.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName!);\r\n                }\r\n                this.profile = { ...this.profile!, ...profile };\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user!.userName && this.profile.userName === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                // if (username !== store.userStore.user!.userName) {\r\n                //    \r\n                // }\r\n                if (this.profile && this.profile.userName === store.userStore.user!.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                // following ? this.followings.push(this.profile!) : this.followings = this.followings.filter(a => a.userName !== username);\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loading = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearFollowings = () => {\r\n        this.followings = [];\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate: string) => {\r\n        console.log('loading user activities', username, predicate);\r\n\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities.data;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport ServerError from \"../../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token, \r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n            );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n    \r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment, CommentFormValues } from \"../../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user!.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection\r\n                .start()\r\n                // .then(() => console.log(this.hubConnection!.state))\r\n                // .then(() => {\r\n                //     console.log('Attempting to join group');\r\n                //     this.hubConnection!.invoke('AddToGroup', activityId);\r\n                // })\r\n                .catch(error => console.log('Error establishing connection: ', error));\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            })\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                        this.comments.push(comment);\r\n                    })\r\n                })\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection!.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: CommentFormValues) => {\r\n        // values.activityId = store.activityStore.selectedActivity!.id;\r\n        try {\r\n            if (this.hubConnection) {\r\n                await this.hubConnection.invoke<ChatComment>('SendComment', values);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, MenuItem, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../api/stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item name='Activities' as={NavLink} to='/activities' />\r\n                <Menu.Item name='Errors' as={NavLink} to='/errors' />\r\n                <Menu.Item>\r\n                    <Button positive content='Create Activity' as={NavLink} to='/createActivity' />\r\n                </Menu.Item>\r\n\r\n                <MenuItem position='right'>\r\n                    <Image src={user && user.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={`${user && user.displayName}`}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user && user.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport { Profile } from '../../app/models/profile'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction FollowButton({ profile }: Props) {\r\n    const { loading, updateFollowing } = useStore().profileStore\r\n    const { user } = useStore().userStore\r\n\r\n    if (profile.userName === user!.userName) return null\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        if (profile.following) {\r\n            updateFollowing(username, false)\r\n        }\r\n        else {\r\n            updateFollowing(username, true)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Reveal animated='move'>\r\n                <Reveal.Content visible style={{ width: '100%' }}>\r\n                    <Button fluid color='teal' content={profile.following ? 'Following' : 'not following'} />\r\n                </Reveal.Content>\r\n                <Reveal.Content hidden style={{ width: '100%' }}>\r\n                    <Button\r\n                        fluid basic color={profile.following ? 'red' : 'green'} content={profile.following ? 'Unfollow' : 'Follow'}\r\n                        loading={loading}\r\n                        onClick={(e) => handleFollow(e, profile.userName)}\r\n                        disabled={loading}\r\n                    />\r\n                </Reveal.Content>\r\n            </Reveal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    Profile: Profile\r\n}\r\n\r\nfunction ProfileCard({ Profile }: Props) {\r\n    return (\r\n        <Card>\r\n            <Image src={Profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{Profile.displayName}</Card.Header>\r\n                <Card.Meta>\r\n                    <span>\r\n                        {\r\n                            (Profile.bio && Profile.bio.length > 30) ? Profile.bio.substring(0, 30) : Profile.bio}\r\n                        ...\r\n                    </span>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button as={Link} to={`/profiles/${Profile.userName}`} basic color='blue' content='View Profile' />\r\n                <Icon name='user' />\r\n                {Profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={Profile} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard)","import { link } from 'fs'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { List, Image, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.userName}\r\n                    trigger={\r\n                        <List.Item key={attendee.displayName} style={{ position: 'relative' }} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard Profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)","import React, { SyntheticEvent } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityListItem({ activity }: Props) {\r\n    const { activityStore } = useStore();\r\n    const { deleteActivity, isLoading } = activityStore;\r\n    const [target, setTarget] = React.useState('');\r\n    const handleDeleteActivity = (e: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        setTarget(e.currentTarget.name);\r\n        deleteActivity(id);\r\n    }\r\n    return (\r\n\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 4 }} size='tiny' circular src={activity.host!.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by\r\n                                <Link to={`/profiles/${activity.host!.userName}`}> {activity.host!.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}, {activity.city}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n                {\r\n                    activity.isHost &&\r\n                    <Button\r\n                        name={activity.id}\r\n                        loading={isLoading && target === activity.id}\r\n                        onClick={(e) => handleDeleteActivity(e, activity.id)}\r\n                        color='red'\r\n                        floated='right'\r\n                        content='Delete'\r\n                    />\r\n                }\r\n            </Segment>\r\n\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                groupedActivities.map(([group, activities]) => {\r\n                    return (\r\n                        <Fragment key={group}>\r\n                            <Header sub color='teal'>\r\n                                {group}\r\n                            </Header>\r\n\r\n                            {\r\n                                activities.map(activity => (\r\n                                    <ActivityListItem key={activity.id} activity={activity} />\r\n                                ))\r\n                            }\r\n\r\n                        </Fragment>)\r\n                })\r\n            }\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Calendar } from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\n\r\nfunction ActivityFilters() {\r\n    const { predicate, setPredicate } = useStore().activityStore\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 50 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n\r\n                />\r\n                <Menu.Item content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date!)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters)","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { pagingParams } from '../../../app/models/paginations';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, initialLoading, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleLoadingNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new pagingParams(activityStore.pagingParams.pageNumber + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, []);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                {initialLoading && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleLoadingNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nconst MyTextInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n                <input {...field} {...props} />\r\n            </label>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\n\r\nfunction LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values)\r\n                .catch(error => setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='LOGIN TO REACTIVITIES' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <Label style={{ marginBottom: '10px' }} basic color='red' content={errors.error} />\r\n                    } />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n\r\n\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm)","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nfunction ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            <Message.List>\r\n                {errors.map((err: any, i: any) => (\r\n                    <Message.Item key={i}>{err}</Message.Item>\r\n                ))}\r\n\r\n            </Message.List>\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../Errors/ValidationErrors'\r\n\r\nfunction RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values)\r\n                .catch(error => {\r\n                    setErrors({ error })\r\n\r\n                })}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                userName: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, isValid, dirty, errors }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='REGISTER TO REACTIVITIES' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='UserName' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error'\r\n                        render={() =>\r\n                            <ValidationErrors errors={errors.error} />\r\n                        } />\r\n\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n\r\n                </Form>\r\n\r\n\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm)","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Divider, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\ndeclare var google: any;\r\n\r\nfunction HomePage() {\r\n  const { userStore, modalStore, commonStore } = useStore();\r\n\r\n  useEffect(() => {\r\n\r\n    if (!commonStore.token) {\r\n      google.accounts.id.initialize({\r\n        client_id: \"657495905393-lb0lcqjjipnugcs75m708q3ee4nvf7bg.apps.googleusercontent.com\",\r\n        callback: userStore.googleLogin,\r\n      });\r\n\r\n      google.accounts.id.renderButton(\r\n        document.getElementById(\"buttonDiv\"),\r\n        { theme: \"outline\", size: \"large\" }  // customization attributes\r\n      );\r\n\r\n      google.accounts.id.prompt((notification: any) => {\r\n        if (notification.isNotDisplayed()) {\r\n          console.log(\"Prompt was not displayed\");\r\n        } else if (notification.isSkippedMoment()) {\r\n          console.log(\"Prompt was skipped\");\r\n        } else if (notification.isDismissedMoment()) {\r\n          console.log(\"Prompt was dismissed\");\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n\r\n  }, [commonStore.token, userStore])\r\n\r\n\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        <h1 className='ui inverted stackable header'>\r\n          <img src='/assets/logo.png' alt='logo' className='ui image massive' />\r\n          <div className='content'>Reactivities</div>\r\n        </h1>\r\n\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <h2 className='ui inverted stackable header'>\r\n              {`Welcome to Reactivities ${userStore.user!.displayName}`}\r\n            </h2>\r\n            <Button as={Link} to='/activities' size='huge' inverted>Go to Activities</Button>\r\n          </>\r\n\r\n        ) : (\r\n\r\n          <>\r\n            <h2>Do whatever you wanted to do</h2>\r\n            <h3>Go ahead and </h3>\r\n            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' color='teal'>Login!</Button>\r\n            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' color='teal'>Register!</Button>\r\n            <Divider horizontal inverted>Or</Divider>\r\n            <Button\r\n              loading={userStore.fbLoading}\r\n              content='Login with Facebook'\r\n              icon='facebook'\r\n              color='facebook'\r\n              size='huge'\r\n              inverted\r\n              onClick={userStore.facebookLogin}\r\n            />\r\n            <Divider horizontal inverted>Or</Divider>\r\n            <Button\r\n              id=\"buttonDiv\"\r\n              loading={userStore.googleLoading}\r\n              // content='Login with Google'\r\n              icon='google'\r\n              // color='google plus'\r\n              // size='huge'\r\n              inverted\r\n\r\n            />\r\n\r\n          </>\r\n\r\n        )}\r\n\r\n      </Container>\r\n    </Segment>\r\n\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content: string;\r\n}\r\n\r\n\r\n\r\nfunction LoadingComponent({inverted = true, content = 'Loading...'} : Props) {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n        <Loader content={content} />\r\n    </Dimmer>\r\n  )\r\n}\r\n\r\nexport default LoadingComponent","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nconst MyTextAreaInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n                <textarea {...field} {...props} />\r\n            </label>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextAreaInput","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: { key: string, text: string, value: string }[];\r\n    label?: string;\r\n}\r\n\r\nconst MyTextInput = ({ label, ...props }: Props) => {\r\n    const [field, meta, helpers] = useField(props);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>\r\n                {label}\r\n            </label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value}\r\n                onChange={(e, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyTextInput","export const categoryOptions = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' },\r\n];\r\n\r\n","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\nconst MyDateInput = ({ ...props }: Partial<ReactDatePickerProps>) => {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(date) => helpers.setValue(date)}\r\n                showTimeSelect\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n                timeCaption=\"time\"\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                placeholderText='Select Date'\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' >{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default MyDateInput","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextAreaInput from '../../../app/common/form/MyTextAreaInput';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/CategoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const { activityStore } = useStore();\r\n    const { isLoading, initialLoading, createActivity, updateActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues);\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id)\r\n            .then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [loadActivity, id]);\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    });\r\n\r\n\r\n    const hanldleFormSubmit = (activity: ActivityFormValues) => {\r\n        if (!activity.id) {\r\n\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (initialLoading) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => hanldleFormSubmit(values)}>\r\n                {({ handleSubmit, isSubmitting }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextAreaInput rows={3} name='description' placeholder='Description' />\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category' />\r\n                        <MyDateInput name='date' />\r\n                        <MyTextInput name='city' placeholder='City' />\r\n                        <MyTextInput name='venue' placeholder='Venue' />\r\n                        <Button loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})\r\n","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { ReactNode, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Button, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store'\r\nimport MyTextAreaInput from '../../../app/common/form/MyTextAreaInput'\r\nimport * as Yup from 'yup'\r\nimport { text } from 'stream/consumers'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    initialValues={{ body: '', activityId }}\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && dirty && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                            placeholder='Add your comment, (Enter to submit, Shift + Enter for new line)'\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(new Date(comment.createdAt))} ago </div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label, } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/api/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { isLoading, updateAttendance, } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', left: '-14', top: '20', zIndex: '100' }} ribbon color='red' content=\"Cancelled\" />\r\n\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{activity.date && format(activity.date, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host && activity.host.userName}`}>\r\n                                            {activity.host && activity.host.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n\r\n                {activity.isHost ?\r\n                    <Button loading={isLoading} onClick={updateAttendance} className={`${activity.isCancelled ? 'green' : 'basic red'}`}>{\r\n                        activity.isCancelled ? 'Reactivate Activity' : 'Cancel Activity'\r\n                    }</Button>\r\n                    :\r\n                    <Button loading={isLoading} onClick={updateAttendance} color='teal'>{\r\n                        activity.isGoing ? 'Cancel attendance' : 'Join Activity'\r\n                    }</Button>\r\n                }\r\n\r\n                {\r\n                    activity.isHost && <Button as={Link} to={`/createActivity/edit/${activity.id}`} color='orange' floated='right' disabled={activity.isCancelled}>\r\n                        Manage Event\r\n                    </Button>\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(new Date(activity.date!), 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity }: Props) {\r\n    const { attendees, hostUsername } = activity;\r\n\r\n    if (!attendees) return null\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length < 2 ? 'Person is' : 'People are'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === hostUsername &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {\r\n                                    attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n    const { selectedActivity: activity, loadActivity, clearSelectedActivity } = activityStore;\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => {\r\n            clearSelectedActivity();\r\n        }\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n\r\n\r\n    if (!activity) return <LoadingComponent content='Activity loading...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState<[]>([]);\r\n\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors.length > 0 && <ValidationErrors errors={errors} />}\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Sorry, we couldn't find what you're looking for.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/api/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container >\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error && commonStore.error.message} />\r\n            {commonStore.error && commonStore.error.details &&\r\n\r\n                <Segment >\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: 10 }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../api/stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const { modalStore } = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer)","import { Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextAreaInput from '../../app/common/form/MyTextAreaInput'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport * as Yup from 'yup'\r\nimport { Profile } from '../../app/models/profile'\r\n\r\n\r\ninterface Props {\r\n    profile: Profile,\r\n    updateProfile: (profile: Partial<Profile>) => void\r\n}\r\n\r\nfunction ProfileEditForm({ profile, updateProfile }: Props) {\r\n    const [profileFormValues, setProfileFormValues] = useState({ displayName: '', bio: '' });\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfileFormValues(\r\n            {\r\n                displayName: profile.displayName,\r\n                bio: profile.bio!\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={profileFormValues}\r\n            onSubmit={values => updateProfile(values)}\r\n            validationSchema={validationSchema}\r\n            enableReinitialize\r\n        >\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header sub color='teal' content='Basics' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextAreaInput name='bio' placeholder='Bio' rows={3} />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        floated='right'\r\n                        positive\r\n                        type='submit'\r\n                        content='Update profile'\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileEditForm)","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileAbout({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, updateProfile } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    function handleUpdateProfile(editProfile: Partial<Profile>) {\r\n        updateProfile(editProfile).then(() => setEditMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setEditMode(!editMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ? (\r\n                        <ProfileEditForm profile={profile} updateProfile={handleUpdateProfile} />\r\n                    ) : (\r\n                        <p>\r\n                            {profile.bio}\r\n                        </p>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileAbout)","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store';\r\nimport { UserActivity } from '../../app/models/profile';\r\n\r\n\r\nfunction ProfileActivities() {\r\n\r\n    const { profile, loadingActivities, loadUserActivities, userActivities } = useStore().profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName, 'future');\r\n    }, [loadUserActivities, profile]);\r\n\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as\r\n            number].menuItem.split(' ')[0].toLowerCase());\r\n    };\r\n\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Event' },\r\n        { menuItem: 'Pass Event' },\r\n        { menuItem: 'Hosting' },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities && userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileActivities)","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport ProfileCard from './ProfileCard'\r\n\r\ninterface Props {\r\n    predicate: string\r\n}\r\n\r\nfunction ProfileFollowings({ predicate }: Props) {\r\n    const { profile, followings, loadFollowings, loading, clearFollowings } = useStore().profileStore\r\n    useEffect(() => {\r\n        loadFollowings(predicate)\r\n\r\n        return () => {\r\n            clearFollowings()\r\n        }\r\n    }, [profile, predicate])\r\n\r\n    return (\r\n        <Tab.Pane loading={loading}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header content={\r\n                        predicate === 'followers' ? `People following ${profile!.displayName}` : `people ${profile!.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.userName} Profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings)","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ setCropper, imagePreview }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%', objectFit: 'cover' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            dragMode='move'\r\n            scalable={false}\r\n            // cropBoxMovable={true}\r\n            // cropBoxResizable={true}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        // crop={this.cropImage}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: '200px'\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles: any) => {\r\n        setFiles(\r\n            acceptedFiles.map((file: any) =>\r\n                Object.assign(file, {\r\n                    preview: URL.createObjectURL(file)\r\n                })\r\n            )\r\n        );\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetDropzone","import React, { useState, useEffect } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../api/stores/store';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nfunction ImageUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => {\r\n                uploadPhoto(blob!);\r\n            }, 'image/jpeg')\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach(file => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 2 - Resize image ' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 3 - Preview & upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}>\r\n                        </div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ImageUploadWidget\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport ImageUploadWidget from '../../app/common/imageUpload/ImageUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadingPhoto, uploadPhoto, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    const [deleteTarget, setDeleteTarget] = useState(false);\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setDeleteTarget(true);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    function handleUploadImage(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <ImageUploadWidget\r\n                            uploadPhoto={handleUploadImage}\r\n                            loading={uploadingPhoto}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos!.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n\r\n                                                basic\r\n                                                positive\r\n                                                content='Main'\r\n                                                name={photo.id}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                loading={loading && target === photo.id && !deleteTarget}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                negative\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                loading={loading && target === photo.id && deleteTarget}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        {\r\n            menuItem: 'Events', render: () => <ProfileActivities />\r\n        },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings predicate='followers' /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings predicate='following' /> },\r\n    ]\r\n\r\n    return (\r\n\r\n        <Tab menu={{ fluid: true, vertical: true }} menuPosition='right' panes={panes} />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent)","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Divider, Grid, Item, ItemGroup, Reveal, Segment, Statistic, StatisticGroup } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <ItemGroup>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' circular src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h1'>{profile.displayName}</Item.Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </ItemGroup>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <StatisticGroup widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </StatisticGroup>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader)","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/store'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nfunction ProfilePage() {\r\n    const { userName } = useParams<{ userName: string }>()\r\n    const { loadingProfile, profile, loadProfile } = useStore().profileStore\r\n\r\n    useEffect(() => {\r\n        loadProfile(userName)\r\n    }, [loadProfile, userName])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {\r\n                    profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n\r\n                        <ProfileContent profile={profile!} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)","import React from 'react';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteProps, Route, Redirect } from \"react-router-dom\";\r\nimport { useStore } from \"../api/stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<any>;\r\n}\r\n\r\nexport default observer(function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => userStore.isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\r\n        />\r\n    )\r\n})","import React, { useEffect } from 'react'\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './layout/NavBar';\r\nimport ActivityDashboard from '../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../features/home/HomePage';\r\nimport ActivityForm from '../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../features/Errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../features/Errors/NotFound';\r\nimport ServerError from '../features/Errors/ServerError';\r\nimport { useStore } from './api/stores/store';\r\nimport LoadingComponent from './layout/LoadingComponent';\r\nimport ModalContainer from './common/modal/ModalContainer';\r\nimport ProfilePage from '../features/profiles/ProfilePage';\r\nimport PrivateRoute from './layout/PrivateRoute';\r\ndeclare var google: any;\r\nfunction App() {\r\n  const location = useLocation();\r\n  const { userStore, commonStore } = useStore();\r\n\r\n  useEffect(\r\n    () => {\r\n      if (commonStore.token) {\r\n        userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n      } else {\r\n        userStore.getFacebookLoginStatus().finally(() => commonStore.setAppLoaded());\r\n\r\n      }\r\n    }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route path={'/(.+)'} render={() => (\r\n        <>\r\n\r\n          <NavBar />\r\n          <Container style={{ marginTop: '6rem' }}>\r\n            <Switch>\r\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n              <PrivateRoute exact path='/activities/:id' component={ActivityDetails} />\r\n              <PrivateRoute exact key={location.key} path={'/createActivity'} component={ActivityForm} />\r\n              <PrivateRoute exact path='/createActivity/edit/:id' component={ActivityForm} />\r\n              <PrivateRoute exact path='/profiles/:userName' component={ProfilePage} />\r\n              <PrivateRoute exact path='/errors' component={TestErrors} />\r\n              <Route path='/server-error' component={ServerError} />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Container>\r\n        </>\r\n      )} />\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './app/index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/api/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n  // </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}